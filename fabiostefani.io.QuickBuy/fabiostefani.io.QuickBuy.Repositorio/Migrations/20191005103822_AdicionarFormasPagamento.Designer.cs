// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using fabiostefani.io.QuickBuy.Repositorio.Contexto;

namespace fabiostefani.io.QuickBuy.Repositorio.Migrations
{
    [DbContext(typeof(QuickBuyContexto))]
    [Migration("20191005103822_AdicionarFormasPagamento")]
    partial class AdicionarFormasPagamento
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("fabiostefani.io.QuickBuy.Dominio.Entidades.ItemPedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idpedido");

                    b.Property<int>("PedidoId")
                        .HasColumnName("idpedido");

                    b.Property<int>("ProdutoId")
                        .HasColumnName("idproduto");

                    b.Property<int>("Quantidade")
                        .HasColumnName("quantidade");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("itenspedido");
                });

            modelBuilder.Entity("fabiostefani.io.QuickBuy.Dominio.Entidades.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idpedido");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnName("cep")
                        .HasMaxLength(10);

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnName("cidade")
                        .HasMaxLength(100);

                    b.Property<DateTime>("DataPedido")
                        .HasColumnName("datapedido");

                    b.Property<DateTime>("DataPrevisaoEntrega")
                        .HasColumnName("dataprevistaentrega");

                    b.Property<string>("EnderecoCompleto")
                        .IsRequired()
                        .HasColumnName("endereco")
                        .HasMaxLength(1000);

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnName("estado")
                        .HasMaxLength(2);

                    b.Property<int>("FormaPagamentoId")
                        .HasColumnName("idformapagto");

                    b.Property<int>("NumeroEndereco")
                        .HasColumnName("numeroendereco");

                    b.Property<int>("UsuarioId")
                        .HasColumnName("idusuario");

                    b.HasKey("Id");

                    b.HasIndex("FormaPagamentoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("pedidos");
                });

            modelBuilder.Entity("fabiostefani.io.QuickBuy.Dominio.Entidades.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idproduto");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao")
                        .HasMaxLength(1000);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(100);

                    b.Property<decimal>("Preco")
                        .HasColumnName("preco");

                    b.HasKey("Id");

                    b.ToTable("produtos");
                });

            modelBuilder.Entity("fabiostefani.io.QuickBuy.Dominio.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idusuario");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(100);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(200);

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnName("senha")
                        .HasMaxLength(400);

                    b.Property<string>("SobreNome")
                        .IsRequired()
                        .HasColumnName("sobrenome")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("fabiostefani.io.QuickBuy.Dominio.ObjetoDeValor.FormaPagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idformapagto");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("descricao")
                        .HasMaxLength(1000);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("formapagamento");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Pagamento através do Boleto",
                            Nome = "Boleto"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Pagamento através do Cartão de Crédito",
                            Nome = "Cartão de Crédito"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Pagamento através de Depósito Bancário",
                            Nome = "Depósito bancário"
                        });
                });

            modelBuilder.Entity("fabiostefani.io.QuickBuy.Dominio.Entidades.ItemPedido", b =>
                {
                    b.HasOne("fabiostefani.io.QuickBuy.Dominio.Entidades.Pedido", "Pedido")
                        .WithMany("ItensPedido")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fabiostefani.io.QuickBuy.Dominio.Entidades.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("fabiostefani.io.QuickBuy.Dominio.Entidades.Pedido", b =>
                {
                    b.HasOne("fabiostefani.io.QuickBuy.Dominio.ObjetoDeValor.FormaPagamento", "FormaPagamento")
                        .WithMany()
                        .HasForeignKey("FormaPagamentoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("fabiostefani.io.QuickBuy.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("Pedidos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
